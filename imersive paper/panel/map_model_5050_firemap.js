document.addEventListener('DOMContentLoaded', function () {
  // 動態引入 CSS
  const cssLink = document.createElement('link');
  cssLink.rel = 'stylesheet';
  cssLink.href = './panel/map_model_5050_firemap_style.css';
  document.head.appendChild(cssLink);

  // 其他邏輯
  const clickableBox = document.getElementById('clickable-box-5050-firemap');
  const solutionDropdown = document.getElementById('solution-5050-firemap');
  const statusBar = document.getElementById('status-bar-5050-firemap');
  const gbestDisplay = document.getElementById('gbest-5050-firemap');
  const mapCheck = document.getElementById('map-check-5050-firemap');
  // 讀檔功能
  const fileInput = document.getElementById('file-input-firemap');
  // 看threshold功能
  const thresholdBtn = document.getElementById('threshold-btn-5050-firemap');
  // 連線功能
  const connectBtn = document.getElementById('connect-btn-5050-firemap');
  //播放暫停
  const playPauseBtn = document.getElementById('play-pause-btn-5050-firemap');
  // 獲取進度條和顯示的元素
  const generationSlider = document.getElementById('generation-slider-5050-firemap');
  const currentGenerationDisplay = document.getElementById('current-generation-5050-firemap');
  // 加減速功能
  const speedUpBtn = document.getElementById('speed-up-btn-firemap');
  const speedDownBtn = document.getElementById('speed-down-btn-firemap');
  const speedDisplay = document.getElementById('speed-display-firemap');


  let sensorCount = 0; // 追蹤 sensor 的總數量
  let gridSize = 50; // 初始 Grid 大小
  let mapSize = 50;
  let sensingRange = 5; // 預設感測範圍
  let connectDistance = 5; // 預設連線距離
  let limitThreshold = []; // 儲存 threshold 資訊
  let generations = {}; // 儲存每一代的感測器位置
  const sensors = []; // 儲存所有 sensor 位置
  let probabilitiesCache = null; // 儲存機率狀態

  //初始sensor擺放位置
  const sensorLayouts = {
    1: [], // 50 × 50 測試用初始解
    2: [] // 50 × 50 找到的最佳解
  };

  // 根據 Threshold 統一顯示顏色，這裡設置 threshold = 0.3
  const threshold = 0.3;

  //功能按鈕
  // 判斷是否為 Threshold 模式
  let isThresholdMode = true; 
  // 判斷是否處於 Connect 模式
  let isConnectMode = false; 
  let connectionLines = []; // 儲存所有連線元素
  // 判斷是否處於播放狀態
  let isPlaying = false; 
  let currentGeneration = 0; // 當前播放的代數
  let playInterval; // 播放的計時器
  // 初始化進度條的最大值
  generationSlider.max = Object.keys(generations).length;
  // 加減速功能變數
  let playbackSpeed = 1; // 默認速度倍率
  const maxSpeed = 4; // 最大速度倍率
  const minSpeed = 1; // 最小速度倍率

  // 清空狀態條內部
  statusBar.innerHTML = '';
  // 生成 0~1 的刻度，每間隔 0.1
  for (let i = 0; i <= 10; i++) {
    const value = (1 - i / 10).toFixed(1); // 倒序顯示 1 -> 0

    // 刻度線
    const scaleLine = document.createElement('div');
    scaleLine.classList.add('scale-line');
    scaleLine.style.top = `${(i / 10) * 100}%`;

    // 刻度數字
    const scaleText = document.createElement('div');
    scaleText.classList.add('status-bar-scale');
    scaleText.style.top = `${(i / 10) * 100}%`;
    scaleText.textContent = value;

    // 添加到狀態條
    statusBar.appendChild(scaleLine);
    statusBar.appendChild(scaleText);
  }

  // 包装 clickableBox 与 x/y 轴
  const container = document.createElement('div');
  container.style.position = 'relative';
  container.style.display = 'inline-block';

  // 创建 X 和 Y 轴容器
  const xAxis = document.createElement('div');
  xAxis.id = 'x-axis-5050';
  xAxis.style.position = 'absolute';
  xAxis.style.top = '-20px'; // X 軸應該在 clickableBox 下方對齊
  xAxis.style.left = '-5px'; // 對齊 clickableBox 左側
  xAxis.style.width = `${gridSize * 30}px`; // 動態寬度：格子數量 * 格子大小
  xAxis.style.display = 'grid';
  xAxis.style.gridTemplateColumns = `repeat(${gridSize}, 1fr)`; // 每個格子一個區間

  const yAxis = document.createElement('div');
  yAxis.id = 'y-axis-5050';
  yAxis.style.position = 'absolute';
  yAxis.style.top = '0'; // 與 clickableBox 頂部對齊
  yAxis.style.left = '-20'; // 在 clickableBox 左側
  yAxis.style.height = `${gridSize * 30}px`; // 動態高度：格子數量 * 格子大小
  yAxis.style.display = 'grid';
  yAxis.style.gridTemplateRows = `repeat(${gridSize}, 1fr)`; // 每個格子一個區間

  // 添加 X 和 Y 轴容器到父级容器
  container.appendChild(clickableBox);
  container.appendChild(xAxis);
  container.appendChild(yAxis);

  // 将容器插入页面
  document.querySelector('.interactive-panel-5050-firemap').prepend(container);

  // 滑鼠事件
  const tooltip = document.createElement('div');
  tooltip.id = 'tooltip';
  tooltip.style.position = 'absolute';
  tooltip.style.display = 'none'; // 預設不顯示
  tooltip.style.backgroundColor = 'rgba(0, 0, 0, 0.7)';
  tooltip.style.color = 'white';
  tooltip.style.padding = '5px 10px';
  tooltip.style.borderRadius = '5px';
  tooltip.style.fontSize = '12px';
  tooltip.style.pointerEvents = 'none'; // 防止 tooltip 擋到滑鼠事件
  document.body.appendChild(tooltip);

  // 初始的firesensor map
  const fileContent0sensor = `
  Map :
  50x50
  Sensing_range : 5
  Connect : 5
  Limit :
  0.3583 0.3583 0.3724 0.4031 0.4035 0.4326 0.4463 0.461 0.4541 0.457 0.4636 0.4577 0.4338 0.418 0.3903 0.3846 0.3583 0.3583 0.3583 0.3307 0.3085 0.2833 0.2592 0.2423 0.2233 0.2481 0.2764 0.3044 0.3375 0.3583 0.3646 0.4262 0.488 0.5937 0.6719 0.7195 0.7195 0.7536 0.7951 0.8276 0.8627 0.8889 0.8974 0.8943 0.8954 0.8946 0.8941 0.8941 0.8949 0.8963
  0.3583 0.384 0.4127 0.4572 0.5018 0.5649 0.6036 0.627 0.6358 0.637 0.6285 0.6105 0.5907 0.5351 0.4787 0.4287 0.3915 0.3603 0.3583 0.3583 0.3466 0.3235 0.3001 0.2776 0.2556 0.2648 0.2852 0.3104 0.3401 0.3583 0.36 0.3944 0.4588 0.5775 0.6645 0.7123 0.7195 0.7406 0.7681 0.7999 0.8316 0.8575 0.8817 0.8993 0.9 0.9 0.9 0.9 0.9 0.8902
  0.3935 0.4435 0.5168 0.6028 0.658 0.6852 0.7017 0.7083 0.7108 0.71 0.7125 0.7038 0.6898 0.6719 0.6263 0.5538 0.4726 0.4101 0.3763 0.3583 0.3583 0.3473 0.3216 0.2988 0.2746 0.2612 0.2802 0.3054 0.333 0.3568 0.3583 0.3842 0.4473 0.5602 0.6529 0.7025 0.7195 0.7289 0.7639 0.7882 0.819 0.8462 0.87 0.8927 0.8971 0.8991 0.8984 0.9 0.9 0.8894
  0.4798 0.5784 0.6544 0.6929 0.7138 0.7195 0.7195 0.7195 0.7195 0.7195 0.7195 0.7195 0.7195 0.7195 0.7038 0.6681 0.6098 0.5123 0.4285 0.3825 0.3583 0.3583 0.3422 0.3175 0.2886 0.2702 0.2801 0.3032 0.3258 0.3518 0.3583 0.3753 0.4296 0.5238 0.6336 0.6928 0.7195 0.7209 0.7525 0.7767 0.8068 0.8352 0.8598 0.8837 0.8986 0.8992 0.8984 0.9 0.9 0.8894
  0.6102 0.6749 0.7165 0.7195 0.7195 0.7238 0.7334 0.7459 0.7562 0.7522 0.751 0.7407 0.7297 0.7195 0.7195 0.7185 0.6935 0.6349 0.5333 0.4438 0.381 0.3583 0.3583 0.3356 0.3108 0.2819 0.2735 0.2986 0.3251 0.3475 0.3583 0.37 0.4129 0.484 0.6055 0.6715 0.7142 0.7195 0.7354 0.7672 0.7921 0.8186 0.8374 0.8619 0.8805 0.8986 0.897 0.8985 0.9 0.8894
  0.6846 0.7195 0.7195 0.7195 0.7395 0.7591 0.775 0.7846 0.7902 0.7917 0.7885 0.7758 0.7628 0.7484 0.7306 0.7195 0.7195 0.7026 0.6335 0.5197 0.4159 0.3603 0.3583 0.3561 0.3241 0.2986 0.275 0.2904 0.3132 0.3372 0.3583 0.3583 0.3874 0.4547 0.5606 0.6472 0.7026 0.7195 0.7209 0.7503 0.7733 0.8001 0.8243 0.8473 0.8613 0.8789 0.8949 0.8972 0.9 0.8902
  0.7195 0.7195 0.7275 0.754 0.7767 0.7962 0.8105 0.8227 0.8292 0.8308 0.8255 0.816 0.8006 0.7824 0.7639 0.7386 0.7195 0.7195 0.6977 0.6285 0.4827 0.4005 0.3601 0.3583 0.3408 0.3106 0.2842 0.285 0.3077 0.3309 0.3554 0.3583 0.3767 0.4248 0.5015 0.6097 0.6807 0.7186 0.7195 0.7298 0.756 0.7794 0.8023 0.8262 0.8418 0.858 0.8711 0.8838 0.8869 0.8947
  0.7195 0.7285 0.7584 0.7855 0.8083 0.8299 0.8448 0.8595 0.8676 0.8641 0.8632 0.8485 0.835 0.816 0.7969 0.7686 0.7427 0.7195 0.7195 0.6862 0.5968 0.4442 0.3794 0.3583 0.3561 0.3234 0.291 0.2758 0.3005 0.3229 0.3431 0.3583 0.3592 0.3934 0.4513 0.5528 0.6389 0.6934 0.7195 0.7195 0.7335 0.7587 0.7799 0.7995 0.8174 0.8332 0.8459 0.8566 0.862 0.8765
  0.7242 0.7532 0.7853 0.813 0.8374 0.8574 0.8774 0.8891 0.895 0.8951 0.8921 0.8831 0.8661 0.8454 0.821 0.7963 0.7671 0.7347 0.7195 0.7195 0.6437 0.5031 0.4058 0.3601 0.3583 0.3349 0.301 0.2784 0.2884 0.3126 0.3343 0.3576 0.3583 0.3756 0.4153 0.4849 0.594 0.6625 0.7068 0.7195 0.7195 0.7327 0.7534 0.775 0.7907 0.8054 0.8159 0.8269 0.835 0.8437
  0.7473 0.7777 0.8079 0.8372 0.8647 0.8869 0.8979 0.8985 0.8992 0.8993 0.9 0.8986 0.8914 0.8717 0.8481 0.82 0.7869 0.7541 0.7202 0.7195 0.6861 0.5764 0.4374 0.3767 0.3583 0.3459 0.3121 0.2811 0.2769 0.2991 0.322 0.3444 0.3583 0.3592 0.3915 0.4318 0.5172 0.6082 0.667 0.7117 0.7195 0.7195 0.7304 0.7496 0.7655 0.778 0.7886 0.8 0.804 0.8132
  0.7648 0.7969 0.8277 0.8584 0.8862 0.9 0.8985 0.8992 0.9 0.9 0.9 0.8991 0.897 0.8993 0.8722 0.8423 0.8072 0.7731 0.7376 0.7195 0.7102 0.6182 0.4714 0.3896 0.3583 0.3508 0.3188 0.2881 0.2706 0.2894 0.3102 0.3329 0.3539 0.3583 0.3648 0.3986 0.4459 0.5201 0.6122 0.6682 0.7067 0.7195 0.7195 0.7202 0.7371 0.7508 0.7623 0.7684 0.7775 0.7797
  0.7769 0.8123 0.8454 0.8767 0.9 0.8985 0.9 0.9 0.9 0.9 0.9 0.9 0.8984 0.8985 0.8877 0.8545 0.8228 0.7886 0.7518 0.7195 0.7195 0.647 0.5018 0.4032 0.3583 0.3568 0.3231 0.2923 0.2662 0.2793 0.2996 0.3218 0.3379 0.3583 0.3583 0.3732 0.4068 0.4513 0.5268 0.6163 0.6629 0.6937 0.7186 0.7195 0.7195 0.7195 0.7319 0.7407 0.7438 0.7508
  0.7857 0.8269 0.8598 0.8884 0.9 0.9 0.9 0.9 0.9 0.9 0.9 0.9 0.9 0.9 0.8993 0.8671 0.8357 0.7992 0.7614 0.7224 0.7195 0.6605 0.525 0.415 0.361 0.3583 0.3261 0.2955 0.2666 0.2666 0.2829 0.303 0.3238 0.348 0.3583 0.3583 0.3735 0.4037 0.4472 0.5184 0.5935 0.6442 0.6793 0.7029 0.715 0.7195 0.7195 0.7195 0.7195 0.7195
  0.7923 0.8308 0.8661 0.8971 0.8984 0.9 0.9 0.9 0.9 0.9 0.9 0.9 0.9 0.8992 0.8986 0.875 0.8445 0.8076 0.7687 0.7281 0.7195 0.6728 0.546 0.4217 0.3627 0.3583 0.3269 0.2957 0.2669 0.2541 0.2724 0.2898 0.3108 0.3277 0.345 0.3583 0.3583 0.3677 0.3957 0.4313 0.4918 0.5556 0.612 0.6495 0.6763 0.6919 0.7034 0.7103 0.7168 0.7195
  0.7881 0.835 0.8655 0.8964 0.8984 0.9 0.9 0.9 0.9 0.9 0.9 0.9 0.9 0.8992 0.8986 0.8771 0.8457 0.8072 0.7691 0.7289 0.7195 0.6712 0.5492 0.4217 0.3628 0.3583 0.327 0.2962 0.2687 0.246 0.2581 0.275 0.2922 0.3141 0.3311 0.3466 0.3583 0.3583 0.3638 0.3844 0.4161 0.4546 0.4945 0.546 0.5926 0.6257 0.649 0.6581 0.6696 0.664
  0.7883 0.8253 0.8585 0.8927 0.8985 0.9 0.9 0.9 0.9 0.9 0.9 0.9 0.9 0.9 0.8986 0.8703 0.837 0.8014 0.765 0.7246 0.7195 0.6646 0.5352 0.4145 0.3628 0.3576 0.3263 0.2962 0.2669 0.2433 0.2471 0.2651 0.2776 0.2926 0.3135 0.3274 0.3445 0.3583 0.3583 0.3617 0.381 0.397 0.4197 0.4473 0.483 0.519 0.5568 0.5728 0.5825 0.5767
  0.7812 0.8172 0.8489 0.8783 0.8986 0.9 0.9 0.9 0.9 0.9 0.9 0.9 0.9 0.9 0.8942 0.8583 0.8267 0.7899 0.754 0.7195 0.7195 0.6521 0.5102 0.4057 0.3583 0.3576 0.3245 0.2959 0.2651 0.2433 0.2439 0.2543 0.2662 0.2785 0.2913 0.3101 0.3226 0.3378 0.3539 0.3583 0.3583 0.3583 0.3734 0.3903 0.4118 0.4235 0.4431 0.4538 0.465 0.4704
  0.7677 0.8013 0.8328 0.8652 0.8935 0.9 0.9 0.9 0.9 0.9 0.9 0.9 0.8938 0.9 0.8759 0.8452 0.812 0.7787 0.7412 0.7195 0.7153 0.6313 0.4906 0.3927 0.3583 0.3547 0.3245 0.2896 0.264 0.2629 0.2662 0.2779 0.2815 0.2852 0.2875 0.2926 0.3018 0.319 0.3307 0.3459 0.3583 0.3583 0.3583 0.3583 0.3665 0.3738 0.385 0.3951 0.3969 0.4032
  0.7531 0.7857 0.8149 0.8485 0.871 0.8943 0.9 0.9 0.8984 0.9 0.8968 0.9 0.9 0.8818 0.8575 0.8258 0.7975 0.7641 0.7275 0.7195 0.6954 0.6002 0.4493 0.3754 0.3583 0.3451 0.3119 0.2839 0.2794 0.2908 0.2991 0.3066 0.3121 0.3122 0.3146 0.3137 0.3162 0.3115 0.313 0.3219 0.3345 0.343 0.3547 0.3583 0.3583 0.3583 0.3583 0.3591 0.3609 0.3592
  0.73 0.7639 0.7923 0.8241 0.8477 0.8701 0.8842 0.8993 0.8993 0.8993 0.8979 0.8899 0.8776 0.8573 0.8309 0.8068 0.7729 0.7412 0.7195 0.7195 0.6657 0.5259 0.4141 0.3592 0.3583 0.3346 0.3071 0.2986 0.3112 0.3242 0.3335 0.3416 0.3466 0.3496 0.3495 0.3496 0.3488 0.3443 0.337 0.3292 0.3218 0.3203 0.3291 0.3378 0.3436 0.3517 0.3568 0.3583 0.3583 0.3583
  0.7203 0.7392 0.7668 0.7962 0.8198 0.8394 0.8578 0.8689 0.8796 0.881 0.8709 0.8594 0.8464 0.8233 0.8043 0.7765 0.7503 0.7202 0.7195 0.7004 0.6095 0.4608 0.3868 0.3583 0.3583 0.3244 0.3161 0.3276 0.3473 0.3576 0.3583 0.3583 0.3583 0.3583 0.3592 0.3592 0.3583 0.3583 0.3583 0.3583 0.3525 0.3349 0.3226 0.3143 0.3204 0.3237 0.3278 0.3329 0.3352 0.3376
  0.7195 0.7195 0.7397 0.7673 0.789 0.8098 0.8278 0.8335 0.8452 0.8471 0.8374 0.8285 0.8134 0.7983 0.774 0.7508 0.7195 0.7195 0.7133 0.6529 0.522 0.4096 0.366 0.3583 0.3445 0.3235 0.345 0.3583 0.3583 0.3583 0.3679 0.3756 0.389 0.4015 0.4097 0.404 0.3968 0.3817 0.373 0.3583 0.3583 0.3583 0.3547 0.3322 0.3128 0.3013 0.3042 0.3095 0.3117 0.3101
  0.7013 0.7195 0.7195 0.7327 0.7554 0.7758 0.7892 0.7998 0.8087 0.8083 0.8028 0.7918 0.7792 0.7626 0.7415 0.7209 0.7195 0.7165 0.6655 0.5736 0.4443 0.3804 0.3591 0.3583 0.3298 0.3539 0.3583 0.3601 0.3716 0.4002 0.4319 0.4643 0.5054 0.5353 0.5407 0.5317 0.5099 0.4914 0.4515 0.411 0.3841 0.3621 0.3583 0.3583 0.3442 0.3187 0.2969 0.2865 0.288 0.288
  0.6423 0.6982 0.7195 0.7195 0.7202 0.7372 0.7528 0.7615 0.7687 0.7685 0.7653 0.7543 0.7455 0.7276 0.7195 0.7195 0.7144 0.6653 0.5781 0.4615 0.3909 0.3583 0.3583 0.3414 0.3583 0.3583 0.3611 0.3878 0.4407 0.5024 0.5866 0.6349 0.6543 0.6719 0.676 0.6726 0.6642 0.6472 0.6082 0.5539 0.4676 0.4121 0.3708 0.3583 0.3583 0.3456 0.3201 0.2937 0.2739 0.2627
  0.535 0.6369 0.6879 0.7165 0.7195 0.7195 0.7195 0.7231 0.729 0.7297 0.7239 0.7209 0.7195 0.7195 0.7195 0.702 0.6575 0.575 0.4667 0.3975 0.3583 0.3583 0.3487 0.3553 0.3583 0.3633 0.3997 0.4699 0.5831 0.6579 0.694 0.7142 0.7195 0.7195 0.7195 0.7195 0.7195 0.7195 0.7052 0.6737 0.626 0.5349 0.4357 0.3718 0.3583 0.3583 0.346 0.3141 0.2902 0.2665
  0.4267 0.5018 0.5952 0.6502 0.6873 0.7114 0.7195 0.7195 0.7195 0.7195 0.7195 0.7195 0.7156 0.6925 0.6664 0.6186 0.5389 0.4456 0.3933 0.3583 0.3583 0.3553 0.3509 0.3583 0.3642 0.4092 0.4919 0.6284 0.7029 0.7195 0.7195 0.7195 0.7202 0.729 0.7355 0.7319 0.729 0.7195 0.7195 0.7195 0.714 0.6628 0.5803 0.4463 0.38 0.3583 0.3583 0.3371 0.3069 0.2797
  0.3674 0.3975 0.4537 0.5103 0.5781 0.6299 0.6527 0.6658 0.6735 0.6732 0.6714 0.6542 0.6277 0.6018 0.5389 0.4682 0.4193 0.3723 0.3583 0.3583 0.3576 0.3406 0.3583 0.3583 0.4092 0.5088 0.6423 0.7047 0.7195 0.7195 0.7282 0.7486 0.7639 0.7731 0.7765 0.7772 0.7673 0.7566 0.7392 0.7195 0.7195 0.7185 0.6805 0.5808 0.4404 0.3769 0.3583 0.3583 0.3316 0.2986
  0.3583 0.3601 0.3834 0.4101 0.4479 0.4875 0.5237 0.546 0.559 0.5559 0.5477 0.5304 0.4941 0.458 0.4248 0.3888 0.3593 0.3583 0.3583 0.3509 0.331 0.3561 0.3583 0.3922 0.4776 0.6198 0.6976 0.7195 0.7195 0.7428 0.7646 0.788 0.8064 0.8149 0.8229 0.822 0.812 0.7976 0.7792 0.7559 0.7299 0.7195 0.7195 0.674 0.5539 0.4235 0.3632 0.3583 0.3451 0.3103
  0.3531 0.3583 0.3583 0.3583 0.3692 0.3912 0.4049 0.4173 0.4281 0.4281 0.4201 0.412 0.3931 0.3809 0.3657 0.3583 0.3583 0.3568 0.3414 0.3235 0.3401 0.3583 0.3623 0.4355 0.5746 0.6915 0.7195 0.7195 0.744 0.7775 0.8013 0.8259 0.8433 0.8547 0.8608 0.858 0.8497 0.8367 0.8149 0.7886 0.761 0.7312 0.7195 0.7195 0.6452 0.4946 0.3974 0.3583 0.3583 0.3253
  0.3243 0.3386 0.3524 0.3583 0.3583 0.3583 0.3583 0.3592 0.3601 0.3601 0.3583 0.3583 0.3583 0.3583 0.3583 0.3576 0.3414 0.3304 0.3133 0.3209 0.3554 0.3583 0.3977 0.4929 0.6526 0.7185 0.7195 0.7401 0.7746 0.8079 0.8333 0.8565 0.8767 0.892 0.8949 0.8949 0.8833 0.8698 0.8476 0.8232 0.7907 0.7588 0.7231 0.7195 0.6978 0.5883 0.4255 0.3721 0.3583 0.34
  0.2966 0.3135 0.3234 0.3341 0.3502 0.3525 0.3576 0.3583 0.3583 0.3583 0.3583 0.3576 0.3524 0.3472 0.3372 0.3261 0.3139 0.302 0.2971 0.3282 0.3583 0.3602 0.4224 0.5722 0.6854 0.7195 0.7247 0.7665 0.7998 0.8338 0.8655 0.8869 0.8986 0.9 0.9 0.8985 0.8985 0.8986 0.8768 0.8486 0.8174 0.7853 0.7499 0.7195 0.7175 0.6456 0.4809 0.3866 0.3583 0.3497
  0.2688 0.2855 0.2933 0.3005 0.3121 0.3183 0.3242 0.3274 0.3294 0.3295 0.3294 0.3255 0.322 0.3139 0.3077 0.2979 0.2872 0.2749 0.3001 0.3356 0.3583 0.3724 0.4661 0.6219 0.7093 0.7195 0.7443 0.7864 0.8256 0.8584 0.8912 0.8978 0.8983 0.8992 0.9 0.9 0.8992 0.8976 0.8993 0.8739 0.8418 0.805 0.7663 0.7268 0.7195 0.6779 0.5445 0.4113 0.3583 0.3575
  0.2427 0.2561 0.2666 0.2758 0.2833 0.2889 0.2913 0.2964 0.2981 0.2988 0.2984 0.2945 0.2906 0.2859 0.2789 0.2716 0.2622 0.2775 0.3081 0.3446 0.3583 0.3873 0.4966 0.6472 0.7195 0.7195 0.7559 0.802 0.8399 0.8747 0.9 0.9 0.8992 0.9 0.9 0.9 0.9 0.9 0.9 0.8921 0.8598 0.8213 0.785 0.739 0.7195 0.6966 0.5836 0.4318 0.3648 0.3583
  0.2337 0.2446 0.2443 0.2513 0.2563 0.2648 0.2673 0.2647 0.2669 0.2676 0.2665 0.2647 0.2651 0.2612 0.2532 0.2457 0.2507 0.2772 0.3096 0.3461 0.3583 0.3989 0.52 0.6646 0.7195 0.7283 0.7664 0.812 0.8529 0.8848 0.9 0.8983 0.9 0.9 0.9 0.9 0.9 0.9 0.8992 0.9 0.8692 0.8338 0.7949 0.7512 0.7195 0.7043 0.6011 0.4433 0.3698 0.3583
  0.2323 0.2344 0.2348 0.2319 0.2413 0.2444 0.2458 0.2461 0.2453 0.2453 0.2458 0.244 0.2435 0.2428 0.2338 0.2358 0.2527 0.2785 0.3096 0.3467 0.3591 0.4055 0.52 0.6618 0.7195 0.7304 0.7755 0.8178 0.8591 0.8935 0.8985 0.9 0.9 0.9 0.9 0.9 0.9 0.9 0.8984 0.8971 0.8768 0.8394 0.7992 0.7538 0.7195 0.7076 0.6117 0.4493 0.3698 0.3583
  0.2323 0.2344 0.2344 0.2344 0.2344 0.2344 0.2344 0.2344 0.2344 0.2344 0.2344 0.2344 0.2344 0.2344 0.2344 0.2358 0.2536 0.2768 0.3112 0.3468 0.3583 0.4006 0.5217 0.6622 0.7195 0.729 0.775 0.8149 0.8575 0.8907 0.8992 0.8976 0.9 0.9 0.9 0.9 0.9 0.9 0.8984 0.9 0.8703 0.8343 0.7949 0.7524 0.7195 0.7076 0.609 0.4472 0.3698 0.3583
  0.2323 0.2344 0.2344 0.2344 0.2344 0.2344 0.2344 0.2344 0.2344 0.2344 0.2344 0.2344 0.2344 0.2344 0.2344 0.2358 0.2484 0.2793 0.3112 0.3446 0.3583 0.3907 0.5054 0.6554 0.7195 0.7202 0.7657 0.8075 0.8465 0.8811 0.8986 0.8959 0.9 0.9 0.9 0.9 0.9 0.8992 0.8984 0.8979 0.8631 0.827 0.7892 0.7426 0.7195 0.7012 0.5921 0.4329 0.3668 0.3583
  0.2323 0.2344 0.2344 0.2344 0.2344 0.2344 0.2344 0.2344 0.2344 0.2344 0.2344 0.2344 0.2344 0.2344 0.2344 0.2358 0.2478 0.2724 0.3039 0.3379 0.3583 0.3783 0.4782 0.6326 0.7185 0.7195 0.7522 0.7904 0.8322 0.8658 0.8971 0.9 0.9 0.9 0.9 0.9 0.9 0.8985 0.8979 0.8832 0.8469 0.8141 0.7724 0.7303 0.7195 0.6801 0.5571 0.4181 0.361 0.3575
  0.2323 0.2344 0.2344 0.2344 0.2344 0.2344 0.2344 0.2344 0.2344 0.2344 0.2344 0.2344 0.2344 0.2344 0.2344 0.2358 0.2452 0.2695 0.302 0.3345 0.3583 0.366 0.4401 0.5958 0.6972 0.7195 0.7334 0.7728 0.8105 0.843 0.8757 0.8978 0.9 0.9 0.9 0.9 0.9 0.8971 0.8896 0.86 0.8263 0.7945 0.7557 0.7195 0.7195 0.6584 0.5038 0.3933 0.3583 0.3513
  0.2323 0.2344 0.2344 0.2344 0.2344 0.2344 0.2344 0.2344 0.2344 0.2344 0.2344 0.2344 0.2344 0.2344 0.2344 0.2351 0.2444 0.2607 0.2926 0.3245 0.3583 0.3592 0.408 0.5352 0.6679 0.7195 0.7195 0.7519 0.7886 0.8155 0.8469 0.872 0.892 0.8993 0.9 0.9 0.8964 0.8826 0.8594 0.8324 0.8025 0.7704 0.7341 0.7195 0.7055 0.615 0.4523 0.3756 0.3583 0.3444
  0.2323 0.2344 0.2344 0.2344 0.2344 0.2344 0.2344 0.2344 0.2344 0.2344 0.2344 0.2344 0.2344 0.2344 0.2344 0.2351 0.2406 0.2557 0.282 0.3115 0.3481 0.3583 0.3732 0.453 0.6156 0.7077 0.7195 0.7238 0.7553 0.7892 0.8138 0.8357 0.8573 0.87 0.8737 0.8722 0.8615 0.8474 0.8251 0.8011 0.771 0.7435 0.7195 0.7195 0.6721 0.5248 0.4099 0.3583 0.3583 0.3335
  0.2323 0.2344 0.2344 0.2344 0.2344 0.2344 0.2344 0.2344 0.2344 0.2344 0.2344 0.2344 0.2344 0.2344 0.2344 0.2344 0.2324 0.2471 0.2717 0.302 0.3342 0.3583 0.3592 0.4025 0.5079 0.6593 0.7195 0.7195 0.7239 0.756 0.778 0.8013 0.8186 0.8305 0.8357 0.8345 0.8252 0.809 0.7879 0.7677 0.7392 0.7195 0.7195 0.7015 0.588 0.4435 0.3734 0.3583 0.3546 0.3147
  0.2323 0.2344 0.2344 0.2344 0.2344 0.2344 0.2344 0.2344 0.2344 0.2344 0.2344 0.2344 0.2344 0.2344 0.2344 0.2344 0.2314 0.2466 0.2593 0.2862 0.3175 0.3488 0.3583 0.3673 0.4274 0.5526 0.6606 0.7195 0.7195 0.7195 0.7385 0.7632 0.777 0.7855 0.7949 0.7923 0.7833 0.7673 0.7526 0.7304 0.7195 0.7195 0.6993 0.625 0.4663 0.3911 0.3583 0.3583 0.3325 0.3022
  0.2323 0.2344 0.2344 0.2344 0.2344 0.2344 0.2344 0.2344 0.2344 0.2344 0.2344 0.2344 0.2344 0.2344 0.2344 0.2344 0.2334 0.2309 0.2507 0.2745 0.3003 0.3286 0.3583 0.3583 0.379 0.4407 0.5598 0.6656 0.7153 0.7195 0.7195 0.721 0.7372 0.7459 0.754 0.7501 0.743 0.7284 0.7195 0.7195 0.7195 0.688 0.6253 0.4924 0.4044 0.3602 0.3583 0.345 0.3159 0.2831
  0.2323 0.2344 0.2344 0.2344 0.2344 0.2344 0.2344 0.2344 0.2344 0.2344 0.2344 0.2344 0.2344 0.2344 0.2344 0.2344 0.2344 0.2319 0.2437 0.256 0.2789 0.309 0.3378 0.3583 0.3592 0.3769 0.4322 0.5331 0.635 0.6876 0.7145 0.7195 0.7195 0.7195 0.7195 0.7195 0.7195 0.7195 0.7195 0.7029 0.6646 0.5931 0.4814 0.4003 0.3593 0.3583 0.3539 0.322 0.3005 0.2628
  0.2323 0.2344 0.2344 0.2344 0.2344 0.2344 0.2344 0.2344 0.2344 0.2344 0.2344 0.2344 0.2344 0.2344 0.2344 0.2344 0.2344 0.2358 0.2323 0.2462 0.268 0.2873 0.3141 0.3378 0.3583 0.3583 0.3751 0.4168 0.4827 0.5792 0.6403 0.67 0.6918 0.6956 0.7105 0.7091 0.6941 0.6801 0.6549 0.6086 0.5329 0.4471 0.3919 0.3583 0.3583 0.3576 0.3298 0.3008 0.278 0.2501
  0.2323 0.2344 0.2344 0.2344 0.2344 0.2344 0.2344 0.2344 0.2344 0.2344 0.2344 0.2344 0.2344 0.2344 0.2344 0.2344 0.2344 0.2344 0.2344 0.2346 0.2488 0.268 0.2899 0.3142 0.3395 0.3583 0.3583 0.3613 0.3919 0.4319 0.4803 0.5445 0.576 0.5922 0.6048 0.6079 0.5938 0.5634 0.5042 0.4516 0.4071 0.3826 0.3601 0.3583 0.3524 0.3285 0.3037 0.2829 0.2599 0.2361
  0.2323 0.2344 0.2344 0.2344 0.2344 0.2344 0.2344 0.2344 0.2344 0.2344 0.2344 0.2344 0.2344 0.2344 0.2344 0.2344 0.2344 0.2344 0.2344 0.2344 0.2415 0.2524 0.268 0.29 0.3142 0.3349 0.3547 0.3583 0.3583 0.3593 0.3906 0.4005 0.4276 0.4381 0.4499 0.4453 0.4313 0.423 0.3976 0.3656 0.3583 0.3583 0.3583 0.3451 0.3226 0.302 0.2826 0.2607 0.2423 0.2252
  0.2307 0.2344 0.2344 0.2344 0.2344 0.2344 0.2344 0.2344 0.2344 0.2344 0.2344 0.2344 0.2344 0.2344 0.2344 0.2344 0.2344 0.2344 0.2344 0.2344 0.2344 0.2401 0.2497 0.268 0.2853 0.3069 0.3248 0.3407 0.3568 0.3583 0.3583 0.3583 0.3583 0.3639 0.3639 0.3639 0.3592 0.3583 0.3583 0.3583 0.3576 0.3518 0.3333 0.3143 0.2971 0.2778 0.2588 0.2437 0.2343 0.2252
  0.2145 0.2185 0.2185 0.2185 0.2185 0.2185 0.2185 0.2185 0.2185 0.2185 0.2185 0.2185 0.2185 0.2185 0.2185 0.2185 0.2185 0.2185 0.2185 0.2185 0.2185 0.2185 0.2233 0.2353 0.2612 0.2741 0.2926 0.3089 0.3211 0.3351 0.3457 0.3543 0.3575 0.3583 0.3575 0.3583 0.3575 0.3583 0.3495 0.3402 0.3291 0.3156 0.2996 0.2788 0.2585 0.2443 0.2313 0.2185 0.2185 0.2
  Generation :
  *1 []
  `;
  // 優化後的firesensor map epin檔
  const fileContent = `
  Map :
  50x50
  Sensing_range : 5
  Connect : 5
  Limit :
  0.3583 0.3583 0.3724 0.4031 0.4035 0.4326 0.4463 0.461 0.4541 0.457 0.4636 0.4577 0.4338 0.418 0.3903 0.3846 0.3583 0.3583 0.3583 0.3307 0.3085 0.2833 0.2592 0.2423 0.2233 0.2481 0.2764 0.3044 0.3375 0.3583 0.3646 0.4262 0.488 0.5937 0.6719 0.7195 0.7195 0.7536 0.7951 0.8276 0.8627 0.8889 0.8974 0.8943 0.8954 0.8946 0.8941 0.8941 0.8949 0.8963
  0.3583 0.384 0.4127 0.4572 0.5018 0.5649 0.6036 0.627 0.6358 0.637 0.6285 0.6105 0.5907 0.5351 0.4787 0.4287 0.3915 0.3603 0.3583 0.3583 0.3466 0.3235 0.3001 0.2776 0.2556 0.2648 0.2852 0.3104 0.3401 0.3583 0.36 0.3944 0.4588 0.5775 0.6645 0.7123 0.7195 0.7406 0.7681 0.7999 0.8316 0.8575 0.8817 0.8993 0.9 0.9 0.9 0.9 0.9 0.8902
  0.3935 0.4435 0.5168 0.6028 0.658 0.6852 0.7017 0.7083 0.7108 0.71 0.7125 0.7038 0.6898 0.6719 0.6263 0.5538 0.4726 0.4101 0.3763 0.3583 0.3583 0.3473 0.3216 0.2988 0.2746 0.2612 0.2802 0.3054 0.333 0.3568 0.3583 0.3842 0.4473 0.5602 0.6529 0.7025 0.7195 0.7289 0.7639 0.7882 0.819 0.8462 0.87 0.8927 0.8971 0.8991 0.8984 0.9 0.9 0.8894
  0.4798 0.5784 0.6544 0.6929 0.7138 0.7195 0.7195 0.7195 0.7195 0.7195 0.7195 0.7195 0.7195 0.7195 0.7038 0.6681 0.6098 0.5123 0.4285 0.3825 0.3583 0.3583 0.3422 0.3175 0.2886 0.2702 0.2801 0.3032 0.3258 0.3518 0.3583 0.3753 0.4296 0.5238 0.6336 0.6928 0.7195 0.7209 0.7525 0.7767 0.8068 0.8352 0.8598 0.8837 0.8986 0.8992 0.8984 0.9 0.9 0.8894
  0.6102 0.6749 0.7165 0.7195 0.7195 0.7238 0.7334 0.7459 0.7562 0.7522 0.751 0.7407 0.7297 0.7195 0.7195 0.7185 0.6935 0.6349 0.5333 0.4438 0.381 0.3583 0.3583 0.3356 0.3108 0.2819 0.2735 0.2986 0.3251 0.3475 0.3583 0.37 0.4129 0.484 0.6055 0.6715 0.7142 0.7195 0.7354 0.7672 0.7921 0.8186 0.8374 0.8619 0.8805 0.8986 0.897 0.8985 0.9 0.8894
  0.6846 0.7195 0.7195 0.7195 0.7395 0.7591 0.775 0.7846 0.7902 0.7917 0.7885 0.7758 0.7628 0.7484 0.7306 0.7195 0.7195 0.7026 0.6335 0.5197 0.4159 0.3603 0.3583 0.3561 0.3241 0.2986 0.275 0.2904 0.3132 0.3372 0.3583 0.3583 0.3874 0.4547 0.5606 0.6472 0.7026 0.7195 0.7209 0.7503 0.7733 0.8001 0.8243 0.8473 0.8613 0.8789 0.8949 0.8972 0.9 0.8902
  0.7195 0.7195 0.7275 0.754 0.7767 0.7962 0.8105 0.8227 0.8292 0.8308 0.8255 0.816 0.8006 0.7824 0.7639 0.7386 0.7195 0.7195 0.6977 0.6285 0.4827 0.4005 0.3601 0.3583 0.3408 0.3106 0.2842 0.285 0.3077 0.3309 0.3554 0.3583 0.3767 0.4248 0.5015 0.6097 0.6807 0.7186 0.7195 0.7298 0.756 0.7794 0.8023 0.8262 0.8418 0.858 0.8711 0.8838 0.8869 0.8947
  0.7195 0.7285 0.7584 0.7855 0.8083 0.8299 0.8448 0.8595 0.8676 0.8641 0.8632 0.8485 0.835 0.816 0.7969 0.7686 0.7427 0.7195 0.7195 0.6862 0.5968 0.4442 0.3794 0.3583 0.3561 0.3234 0.291 0.2758 0.3005 0.3229 0.3431 0.3583 0.3592 0.3934 0.4513 0.5528 0.6389 0.6934 0.7195 0.7195 0.7335 0.7587 0.7799 0.7995 0.8174 0.8332 0.8459 0.8566 0.862 0.8765
  0.7242 0.7532 0.7853 0.813 0.8374 0.8574 0.8774 0.8891 0.895 0.8951 0.8921 0.8831 0.8661 0.8454 0.821 0.7963 0.7671 0.7347 0.7195 0.7195 0.6437 0.5031 0.4058 0.3601 0.3583 0.3349 0.301 0.2784 0.2884 0.3126 0.3343 0.3576 0.3583 0.3756 0.4153 0.4849 0.594 0.6625 0.7068 0.7195 0.7195 0.7327 0.7534 0.775 0.7907 0.8054 0.8159 0.8269 0.835 0.8437
  0.7473 0.7777 0.8079 0.8372 0.8647 0.8869 0.8979 0.8985 0.8992 0.8993 0.9 0.8986 0.8914 0.8717 0.8481 0.82 0.7869 0.7541 0.7202 0.7195 0.6861 0.5764 0.4374 0.3767 0.3583 0.3459 0.3121 0.2811 0.2769 0.2991 0.322 0.3444 0.3583 0.3592 0.3915 0.4318 0.5172 0.6082 0.667 0.7117 0.7195 0.7195 0.7304 0.7496 0.7655 0.778 0.7886 0.8 0.804 0.8132
  0.7648 0.7969 0.8277 0.8584 0.8862 0.9 0.8985 0.8992 0.9 0.9 0.9 0.8991 0.897 0.8993 0.8722 0.8423 0.8072 0.7731 0.7376 0.7195 0.7102 0.6182 0.4714 0.3896 0.3583 0.3508 0.3188 0.2881 0.2706 0.2894 0.3102 0.3329 0.3539 0.3583 0.3648 0.3986 0.4459 0.5201 0.6122 0.6682 0.7067 0.7195 0.7195 0.7202 0.7371 0.7508 0.7623 0.7684 0.7775 0.7797
  0.7769 0.8123 0.8454 0.8767 0.9 0.8985 0.9 0.9 0.9 0.9 0.9 0.9 0.8984 0.8985 0.8877 0.8545 0.8228 0.7886 0.7518 0.7195 0.7195 0.647 0.5018 0.4032 0.3583 0.3568 0.3231 0.2923 0.2662 0.2793 0.2996 0.3218 0.3379 0.3583 0.3583 0.3732 0.4068 0.4513 0.5268 0.6163 0.6629 0.6937 0.7186 0.7195 0.7195 0.7195 0.7319 0.7407 0.7438 0.7508
  0.7857 0.8269 0.8598 0.8884 0.9 0.9 0.9 0.9 0.9 0.9 0.9 0.9 0.9 0.9 0.8993 0.8671 0.8357 0.7992 0.7614 0.7224 0.7195 0.6605 0.525 0.415 0.361 0.3583 0.3261 0.2955 0.2666 0.2666 0.2829 0.303 0.3238 0.348 0.3583 0.3583 0.3735 0.4037 0.4472 0.5184 0.5935 0.6442 0.6793 0.7029 0.715 0.7195 0.7195 0.7195 0.7195 0.7195
  0.7923 0.8308 0.8661 0.8971 0.8984 0.9 0.9 0.9 0.9 0.9 0.9 0.9 0.9 0.8992 0.8986 0.875 0.8445 0.8076 0.7687 0.7281 0.7195 0.6728 0.546 0.4217 0.3627 0.3583 0.3269 0.2957 0.2669 0.2541 0.2724 0.2898 0.3108 0.3277 0.345 0.3583 0.3583 0.3677 0.3957 0.4313 0.4918 0.5556 0.612 0.6495 0.6763 0.6919 0.7034 0.7103 0.7168 0.7195
  0.7881 0.835 0.8655 0.8964 0.8984 0.9 0.9 0.9 0.9 0.9 0.9 0.9 0.9 0.8992 0.8986 0.8771 0.8457 0.8072 0.7691 0.7289 0.7195 0.6712 0.5492 0.4217 0.3628 0.3583 0.327 0.2962 0.2687 0.246 0.2581 0.275 0.2922 0.3141 0.3311 0.3466 0.3583 0.3583 0.3638 0.3844 0.4161 0.4546 0.4945 0.546 0.5926 0.6257 0.649 0.6581 0.6696 0.664
  0.7883 0.8253 0.8585 0.8927 0.8985 0.9 0.9 0.9 0.9 0.9 0.9 0.9 0.9 0.9 0.8986 0.8703 0.837 0.8014 0.765 0.7246 0.7195 0.6646 0.5352 0.4145 0.3628 0.3576 0.3263 0.2962 0.2669 0.2433 0.2471 0.2651 0.2776 0.2926 0.3135 0.3274 0.3445 0.3583 0.3583 0.3617 0.381 0.397 0.4197 0.4473 0.483 0.519 0.5568 0.5728 0.5825 0.5767
  0.7812 0.8172 0.8489 0.8783 0.8986 0.9 0.9 0.9 0.9 0.9 0.9 0.9 0.9 0.9 0.8942 0.8583 0.8267 0.7899 0.754 0.7195 0.7195 0.6521 0.5102 0.4057 0.3583 0.3576 0.3245 0.2959 0.2651 0.2433 0.2439 0.2543 0.2662 0.2785 0.2913 0.3101 0.3226 0.3378 0.3539 0.3583 0.3583 0.3583 0.3734 0.3903 0.4118 0.4235 0.4431 0.4538 0.465 0.4704
  0.7677 0.8013 0.8328 0.8652 0.8935 0.9 0.9 0.9 0.9 0.9 0.9 0.9 0.8938 0.9 0.8759 0.8452 0.812 0.7787 0.7412 0.7195 0.7153 0.6313 0.4906 0.3927 0.3583 0.3547 0.3245 0.2896 0.264 0.2629 0.2662 0.2779 0.2815 0.2852 0.2875 0.2926 0.3018 0.319 0.3307 0.3459 0.3583 0.3583 0.3583 0.3583 0.3665 0.3738 0.385 0.3951 0.3969 0.4032
  0.7531 0.7857 0.8149 0.8485 0.871 0.8943 0.9 0.9 0.8984 0.9 0.8968 0.9 0.9 0.8818 0.8575 0.8258 0.7975 0.7641 0.7275 0.7195 0.6954 0.6002 0.4493 0.3754 0.3583 0.3451 0.3119 0.2839 0.2794 0.2908 0.2991 0.3066 0.3121 0.3122 0.3146 0.3137 0.3162 0.3115 0.313 0.3219 0.3345 0.343 0.3547 0.3583 0.3583 0.3583 0.3583 0.3591 0.3609 0.3592
  0.73 0.7639 0.7923 0.8241 0.8477 0.8701 0.8842 0.8993 0.8993 0.8993 0.8979 0.8899 0.8776 0.8573 0.8309 0.8068 0.7729 0.7412 0.7195 0.7195 0.6657 0.5259 0.4141 0.3592 0.3583 0.3346 0.3071 0.2986 0.3112 0.3242 0.3335 0.3416 0.3466 0.3496 0.3495 0.3496 0.3488 0.3443 0.337 0.3292 0.3218 0.3203 0.3291 0.3378 0.3436 0.3517 0.3568 0.3583 0.3583 0.3583
  0.7203 0.7392 0.7668 0.7962 0.8198 0.8394 0.8578 0.8689 0.8796 0.881 0.8709 0.8594 0.8464 0.8233 0.8043 0.7765 0.7503 0.7202 0.7195 0.7004 0.6095 0.4608 0.3868 0.3583 0.3583 0.3244 0.3161 0.3276 0.3473 0.3576 0.3583 0.3583 0.3583 0.3583 0.3592 0.3592 0.3583 0.3583 0.3583 0.3583 0.3525 0.3349 0.3226 0.3143 0.3204 0.3237 0.3278 0.3329 0.3352 0.3376
  0.7195 0.7195 0.7397 0.7673 0.789 0.8098 0.8278 0.8335 0.8452 0.8471 0.8374 0.8285 0.8134 0.7983 0.774 0.7508 0.7195 0.7195 0.7133 0.6529 0.522 0.4096 0.366 0.3583 0.3445 0.3235 0.345 0.3583 0.3583 0.3583 0.3679 0.3756 0.389 0.4015 0.4097 0.404 0.3968 0.3817 0.373 0.3583 0.3583 0.3583 0.3547 0.3322 0.3128 0.3013 0.3042 0.3095 0.3117 0.3101
  0.7013 0.7195 0.7195 0.7327 0.7554 0.7758 0.7892 0.7998 0.8087 0.8083 0.8028 0.7918 0.7792 0.7626 0.7415 0.7209 0.7195 0.7165 0.6655 0.5736 0.4443 0.3804 0.3591 0.3583 0.3298 0.3539 0.3583 0.3601 0.3716 0.4002 0.4319 0.4643 0.5054 0.5353 0.5407 0.5317 0.5099 0.4914 0.4515 0.411 0.3841 0.3621 0.3583 0.3583 0.3442 0.3187 0.2969 0.2865 0.288 0.288
  0.6423 0.6982 0.7195 0.7195 0.7202 0.7372 0.7528 0.7615 0.7687 0.7685 0.7653 0.7543 0.7455 0.7276 0.7195 0.7195 0.7144 0.6653 0.5781 0.4615 0.3909 0.3583 0.3583 0.3414 0.3583 0.3583 0.3611 0.3878 0.4407 0.5024 0.5866 0.6349 0.6543 0.6719 0.676 0.6726 0.6642 0.6472 0.6082 0.5539 0.4676 0.4121 0.3708 0.3583 0.3583 0.3456 0.3201 0.2937 0.2739 0.2627
  0.535 0.6369 0.6879 0.7165 0.7195 0.7195 0.7195 0.7231 0.729 0.7297 0.7239 0.7209 0.7195 0.7195 0.7195 0.702 0.6575 0.575 0.4667 0.3975 0.3583 0.3583 0.3487 0.3553 0.3583 0.3633 0.3997 0.4699 0.5831 0.6579 0.694 0.7142 0.7195 0.7195 0.7195 0.7195 0.7195 0.7195 0.7052 0.6737 0.626 0.5349 0.4357 0.3718 0.3583 0.3583 0.346 0.3141 0.2902 0.2665
  0.4267 0.5018 0.5952 0.6502 0.6873 0.7114 0.7195 0.7195 0.7195 0.7195 0.7195 0.7195 0.7156 0.6925 0.6664 0.6186 0.5389 0.4456 0.3933 0.3583 0.3583 0.3553 0.3509 0.3583 0.3642 0.4092 0.4919 0.6284 0.7029 0.7195 0.7195 0.7195 0.7202 0.729 0.7355 0.7319 0.729 0.7195 0.7195 0.7195 0.714 0.6628 0.5803 0.4463 0.38 0.3583 0.3583 0.3371 0.3069 0.2797
  0.3674 0.3975 0.4537 0.5103 0.5781 0.6299 0.6527 0.6658 0.6735 0.6732 0.6714 0.6542 0.6277 0.6018 0.5389 0.4682 0.4193 0.3723 0.3583 0.3583 0.3576 0.3406 0.3583 0.3583 0.4092 0.5088 0.6423 0.7047 0.7195 0.7195 0.7282 0.7486 0.7639 0.7731 0.7765 0.7772 0.7673 0.7566 0.7392 0.7195 0.7195 0.7185 0.6805 0.5808 0.4404 0.3769 0.3583 0.3583 0.3316 0.2986
  0.3583 0.3601 0.3834 0.4101 0.4479 0.4875 0.5237 0.546 0.559 0.5559 0.5477 0.5304 0.4941 0.458 0.4248 0.3888 0.3593 0.3583 0.3583 0.3509 0.331 0.3561 0.3583 0.3922 0.4776 0.6198 0.6976 0.7195 0.7195 0.7428 0.7646 0.788 0.8064 0.8149 0.8229 0.822 0.812 0.7976 0.7792 0.7559 0.7299 0.7195 0.7195 0.674 0.5539 0.4235 0.3632 0.3583 0.3451 0.3103
  0.3531 0.3583 0.3583 0.3583 0.3692 0.3912 0.4049 0.4173 0.4281 0.4281 0.4201 0.412 0.3931 0.3809 0.3657 0.3583 0.3583 0.3568 0.3414 0.3235 0.3401 0.3583 0.3623 0.4355 0.5746 0.6915 0.7195 0.7195 0.744 0.7775 0.8013 0.8259 0.8433 0.8547 0.8608 0.858 0.8497 0.8367 0.8149 0.7886 0.761 0.7312 0.7195 0.7195 0.6452 0.4946 0.3974 0.3583 0.3583 0.3253
  0.3243 0.3386 0.3524 0.3583 0.3583 0.3583 0.3583 0.3592 0.3601 0.3601 0.3583 0.3583 0.3583 0.3583 0.3583 0.3576 0.3414 0.3304 0.3133 0.3209 0.3554 0.3583 0.3977 0.4929 0.6526 0.7185 0.7195 0.7401 0.7746 0.8079 0.8333 0.8565 0.8767 0.892 0.8949 0.8949 0.8833 0.8698 0.8476 0.8232 0.7907 0.7588 0.7231 0.7195 0.6978 0.5883 0.4255 0.3721 0.3583 0.34
  0.2966 0.3135 0.3234 0.3341 0.3502 0.3525 0.3576 0.3583 0.3583 0.3583 0.3583 0.3576 0.3524 0.3472 0.3372 0.3261 0.3139 0.302 0.2971 0.3282 0.3583 0.3602 0.4224 0.5722 0.6854 0.7195 0.7247 0.7665 0.7998 0.8338 0.8655 0.8869 0.8986 0.9 0.9 0.8985 0.8985 0.8986 0.8768 0.8486 0.8174 0.7853 0.7499 0.7195 0.7175 0.6456 0.4809 0.3866 0.3583 0.3497
  0.2688 0.2855 0.2933 0.3005 0.3121 0.3183 0.3242 0.3274 0.3294 0.3295 0.3294 0.3255 0.322 0.3139 0.3077 0.2979 0.2872 0.2749 0.3001 0.3356 0.3583 0.3724 0.4661 0.6219 0.7093 0.7195 0.7443 0.7864 0.8256 0.8584 0.8912 0.8978 0.8983 0.8992 0.9 0.9 0.8992 0.8976 0.8993 0.8739 0.8418 0.805 0.7663 0.7268 0.7195 0.6779 0.5445 0.4113 0.3583 0.3575
  0.2427 0.2561 0.2666 0.2758 0.2833 0.2889 0.2913 0.2964 0.2981 0.2988 0.2984 0.2945 0.2906 0.2859 0.2789 0.2716 0.2622 0.2775 0.3081 0.3446 0.3583 0.3873 0.4966 0.6472 0.7195 0.7195 0.7559 0.802 0.8399 0.8747 0.9 0.9 0.8992 0.9 0.9 0.9 0.9 0.9 0.9 0.8921 0.8598 0.8213 0.785 0.739 0.7195 0.6966 0.5836 0.4318 0.3648 0.3583
  0.2337 0.2446 0.2443 0.2513 0.2563 0.2648 0.2673 0.2647 0.2669 0.2676 0.2665 0.2647 0.2651 0.2612 0.2532 0.2457 0.2507 0.2772 0.3096 0.3461 0.3583 0.3989 0.52 0.6646 0.7195 0.7283 0.7664 0.812 0.8529 0.8848 0.9 0.8983 0.9 0.9 0.9 0.9 0.9 0.9 0.8992 0.9 0.8692 0.8338 0.7949 0.7512 0.7195 0.7043 0.6011 0.4433 0.3698 0.3583
  0.2323 0.2344 0.2348 0.2319 0.2413 0.2444 0.2458 0.2461 0.2453 0.2453 0.2458 0.244 0.2435 0.2428 0.2338 0.2358 0.2527 0.2785 0.3096 0.3467 0.3591 0.4055 0.52 0.6618 0.7195 0.7304 0.7755 0.8178 0.8591 0.8935 0.8985 0.9 0.9 0.9 0.9 0.9 0.9 0.9 0.8984 0.8971 0.8768 0.8394 0.7992 0.7538 0.7195 0.7076 0.6117 0.4493 0.3698 0.3583
  0.2323 0.2344 0.2344 0.2344 0.2344 0.2344 0.2344 0.2344 0.2344 0.2344 0.2344 0.2344 0.2344 0.2344 0.2344 0.2358 0.2536 0.2768 0.3112 0.3468 0.3583 0.4006 0.5217 0.6622 0.7195 0.729 0.775 0.8149 0.8575 0.8907 0.8992 0.8976 0.9 0.9 0.9 0.9 0.9 0.9 0.8984 0.9 0.8703 0.8343 0.7949 0.7524 0.7195 0.7076 0.609 0.4472 0.3698 0.3583
  0.2323 0.2344 0.2344 0.2344 0.2344 0.2344 0.2344 0.2344 0.2344 0.2344 0.2344 0.2344 0.2344 0.2344 0.2344 0.2358 0.2484 0.2793 0.3112 0.3446 0.3583 0.3907 0.5054 0.6554 0.7195 0.7202 0.7657 0.8075 0.8465 0.8811 0.8986 0.8959 0.9 0.9 0.9 0.9 0.9 0.8992 0.8984 0.8979 0.8631 0.827 0.7892 0.7426 0.7195 0.7012 0.5921 0.4329 0.3668 0.3583
  0.2323 0.2344 0.2344 0.2344 0.2344 0.2344 0.2344 0.2344 0.2344 0.2344 0.2344 0.2344 0.2344 0.2344 0.2344 0.2358 0.2478 0.2724 0.3039 0.3379 0.3583 0.3783 0.4782 0.6326 0.7185 0.7195 0.7522 0.7904 0.8322 0.8658 0.8971 0.9 0.9 0.9 0.9 0.9 0.9 0.8985 0.8979 0.8832 0.8469 0.8141 0.7724 0.7303 0.7195 0.6801 0.5571 0.4181 0.361 0.3575
  0.2323 0.2344 0.2344 0.2344 0.2344 0.2344 0.2344 0.2344 0.2344 0.2344 0.2344 0.2344 0.2344 0.2344 0.2344 0.2358 0.2452 0.2695 0.302 0.3345 0.3583 0.366 0.4401 0.5958 0.6972 0.7195 0.7334 0.7728 0.8105 0.843 0.8757 0.8978 0.9 0.9 0.9 0.9 0.9 0.8971 0.8896 0.86 0.8263 0.7945 0.7557 0.7195 0.7195 0.6584 0.5038 0.3933 0.3583 0.3513
  0.2323 0.2344 0.2344 0.2344 0.2344 0.2344 0.2344 0.2344 0.2344 0.2344 0.2344 0.2344 0.2344 0.2344 0.2344 0.2351 0.2444 0.2607 0.2926 0.3245 0.3583 0.3592 0.408 0.5352 0.6679 0.7195 0.7195 0.7519 0.7886 0.8155 0.8469 0.872 0.892 0.8993 0.9 0.9 0.8964 0.8826 0.8594 0.8324 0.8025 0.7704 0.7341 0.7195 0.7055 0.615 0.4523 0.3756 0.3583 0.3444
  0.2323 0.2344 0.2344 0.2344 0.2344 0.2344 0.2344 0.2344 0.2344 0.2344 0.2344 0.2344 0.2344 0.2344 0.2344 0.2351 0.2406 0.2557 0.282 0.3115 0.3481 0.3583 0.3732 0.453 0.6156 0.7077 0.7195 0.7238 0.7553 0.7892 0.8138 0.8357 0.8573 0.87 0.8737 0.8722 0.8615 0.8474 0.8251 0.8011 0.771 0.7435 0.7195 0.7195 0.6721 0.5248 0.4099 0.3583 0.3583 0.3335
  0.2323 0.2344 0.2344 0.2344 0.2344 0.2344 0.2344 0.2344 0.2344 0.2344 0.2344 0.2344 0.2344 0.2344 0.2344 0.2344 0.2324 0.2471 0.2717 0.302 0.3342 0.3583 0.3592 0.4025 0.5079 0.6593 0.7195 0.7195 0.7239 0.756 0.778 0.8013 0.8186 0.8305 0.8357 0.8345 0.8252 0.809 0.7879 0.7677 0.7392 0.7195 0.7195 0.7015 0.588 0.4435 0.3734 0.3583 0.3546 0.3147
  0.2323 0.2344 0.2344 0.2344 0.2344 0.2344 0.2344 0.2344 0.2344 0.2344 0.2344 0.2344 0.2344 0.2344 0.2344 0.2344 0.2314 0.2466 0.2593 0.2862 0.3175 0.3488 0.3583 0.3673 0.4274 0.5526 0.6606 0.7195 0.7195 0.7195 0.7385 0.7632 0.777 0.7855 0.7949 0.7923 0.7833 0.7673 0.7526 0.7304 0.7195 0.7195 0.6993 0.625 0.4663 0.3911 0.3583 0.3583 0.3325 0.3022
  0.2323 0.2344 0.2344 0.2344 0.2344 0.2344 0.2344 0.2344 0.2344 0.2344 0.2344 0.2344 0.2344 0.2344 0.2344 0.2344 0.2334 0.2309 0.2507 0.2745 0.3003 0.3286 0.3583 0.3583 0.379 0.4407 0.5598 0.6656 0.7153 0.7195 0.7195 0.721 0.7372 0.7459 0.754 0.7501 0.743 0.7284 0.7195 0.7195 0.7195 0.688 0.6253 0.4924 0.4044 0.3602 0.3583 0.345 0.3159 0.2831
  0.2323 0.2344 0.2344 0.2344 0.2344 0.2344 0.2344 0.2344 0.2344 0.2344 0.2344 0.2344 0.2344 0.2344 0.2344 0.2344 0.2344 0.2319 0.2437 0.256 0.2789 0.309 0.3378 0.3583 0.3592 0.3769 0.4322 0.5331 0.635 0.6876 0.7145 0.7195 0.7195 0.7195 0.7195 0.7195 0.7195 0.7195 0.7195 0.7029 0.6646 0.5931 0.4814 0.4003 0.3593 0.3583 0.3539 0.322 0.3005 0.2628
  0.2323 0.2344 0.2344 0.2344 0.2344 0.2344 0.2344 0.2344 0.2344 0.2344 0.2344 0.2344 0.2344 0.2344 0.2344 0.2344 0.2344 0.2358 0.2323 0.2462 0.268 0.2873 0.3141 0.3378 0.3583 0.3583 0.3751 0.4168 0.4827 0.5792 0.6403 0.67 0.6918 0.6956 0.7105 0.7091 0.6941 0.6801 0.6549 0.6086 0.5329 0.4471 0.3919 0.3583 0.3583 0.3576 0.3298 0.3008 0.278 0.2501
  0.2323 0.2344 0.2344 0.2344 0.2344 0.2344 0.2344 0.2344 0.2344 0.2344 0.2344 0.2344 0.2344 0.2344 0.2344 0.2344 0.2344 0.2344 0.2344 0.2346 0.2488 0.268 0.2899 0.3142 0.3395 0.3583 0.3583 0.3613 0.3919 0.4319 0.4803 0.5445 0.576 0.5922 0.6048 0.6079 0.5938 0.5634 0.5042 0.4516 0.4071 0.3826 0.3601 0.3583 0.3524 0.3285 0.3037 0.2829 0.2599 0.2361
  0.2323 0.2344 0.2344 0.2344 0.2344 0.2344 0.2344 0.2344 0.2344 0.2344 0.2344 0.2344 0.2344 0.2344 0.2344 0.2344 0.2344 0.2344 0.2344 0.2344 0.2415 0.2524 0.268 0.29 0.3142 0.3349 0.3547 0.3583 0.3583 0.3593 0.3906 0.4005 0.4276 0.4381 0.4499 0.4453 0.4313 0.423 0.3976 0.3656 0.3583 0.3583 0.3583 0.3451 0.3226 0.302 0.2826 0.2607 0.2423 0.2252
  0.2307 0.2344 0.2344 0.2344 0.2344 0.2344 0.2344 0.2344 0.2344 0.2344 0.2344 0.2344 0.2344 0.2344 0.2344 0.2344 0.2344 0.2344 0.2344 0.2344 0.2344 0.2401 0.2497 0.268 0.2853 0.3069 0.3248 0.3407 0.3568 0.3583 0.3583 0.3583 0.3583 0.3639 0.3639 0.3639 0.3592 0.3583 0.3583 0.3583 0.3576 0.3518 0.3333 0.3143 0.2971 0.2778 0.2588 0.2437 0.2343 0.2252
  0.2145 0.2185 0.2185 0.2185 0.2185 0.2185 0.2185 0.2185 0.2185 0.2185 0.2185 0.2185 0.2185 0.2185 0.2185 0.2185 0.2185 0.2185 0.2185 0.2185 0.2185 0.2185 0.2233 0.2353 0.2612 0.2741 0.2926 0.3089 0.3211 0.3351 0.3457 0.3543 0.3575 0.3583 0.3575 0.3583 0.3575 0.3583 0.3495 0.3402 0.3291 0.3156 0.2996 0.2788 0.2585 0.2443 0.2313 0.2185 0.2185 0.2
  Generation :
  *1 [{ x: 22, y: 0 }, { x: 35, y: 0 }, { x: 39, y: 0 }, { x: 44, y: 0 }, { x: 45, y: 0 }, { x: 20, y: 1 }, { x: 42, y: 1 }, { x: 49, y: 1 }, { x: 3, y: 2 }, { x: 10, y: 2 }, { x: 15, y: 2 }, { x: 6, y: 3 }, { x: 25, y: 3 }, { x: 29, y: 3 }, { x: 41, y: 3 }, { x: 48, y: 3 }, { x: 2, y: 4 }, { x: 32, y: 4 }, { x: 10, y: 5 }, { x: 38, y: 5 }, { x: 47, y: 5 }, { x: 12, y: 6 }, { x: 19, y: 6 }, { x: 45, y: 6 }, { x: 15, y: 7 }, { x: 33, y: 7 }, { x: 47, y: 7 }, { x: 1, y: 8 }, { x: 6, y: 8 }, { x: 11, y: 8 }, { x: 41, y: 8 }, { x: 20, y: 9 }, { x: 37, y: 9 }, { x: 49, y: 9 }, { x: 3, y: 10 }, { x: 37, y: 10 }, { x: 9, y: 11 }, { x: 11, y: 11 }, { x: 27, y: 11 }, { x: 4, y: 12 }, { x: 22, y: 12 }, { x: 42, y: 12 }, { x: 48, y: 12 }, { x: 12, y: 13 }, { x: 14, y: 13 }, { x: 17, y: 13 }, { x: 35, y: 13 }, { x: 3, y: 14 }, { x: 8, y: 14 }, { x: 48, y: 14 }, { x: 0, y: 15 }, { x: 38, y: 15 }, { x: 44, y: 15 }, { x: 33, y: 16 }, { x: 4, y: 17 }, { x: 14, y: 17 }, { x: 19, y: 17 }, { x: 9, y: 18 }, { x: 10, y: 18 }, { x: 24, y: 18 }, { x: 37, y: 18 }, { x: 5, y: 19 }, { x: 30, y: 19 }, { x: 4, y: 20 }, { x: 18, y: 20 }, { x: 22, y: 20 }, { x: 33, y: 20 }, { x: 12, y: 21 }, { x: 49, y: 21 }, { x: 0, y: 22 }, { x: 12, y: 22 }, { x: 42, y: 22 }, { x: 25, y: 23 }, { x: 5, y: 24 }, { x: 27, y: 24 }, { x: 36, y: 24 }, { x: 10, y: 25 }, { x: 16, y: 26 }, { x: 17, y: 26 }, { x: 31, y: 26 }, { x: 40, y: 26 }, { x: 47, y: 26 }, { x: 48, y: 27 }, { x: 1, y: 28 }, { x: 9, y: 28 }, { x: 24, y: 28 }, { x: 35, y: 28 }, { x: 29, y: 29 }, { x: 43, y: 29 }, { x: 37, y: 30 }, { x: 30, y: 31 }, { x: 44, y: 31 }, { x: 47, y: 31 }, { x: 48, y: 31 }, { x: 3, y: 32 }, { x: 22, y: 32 }, { x: 32, y: 32 }, { x: 11, y: 33 }, { x: 24, y: 33 }, { x: 34, y: 33 }, { x: 40, y: 33 }, { x: 29, y: 34 }, { x: 36, y: 34 }, { x: 16, y: 35 }, { x: 39, y: 35 }, { x: 30, y: 37 }, { x: 36, y: 37 }, { x: 40, y: 37 }, { x: 45, y: 37 }, { x: 25, y: 38 }, { x: 8, y: 39 }, { x: 22, y: 39 }, { x: 32, y: 39 }, { x: 49, y: 39 }, { x: 2, y: 40 }, { x: 15, y: 40 }, { x: 36, y: 40 }, { x: 27, y: 41 }, { x: 33, y: 41 }, { x: 45, y: 41 }, { x: 38, y: 42 }, { x: 41, y: 42 }, { x: 29, y: 43 }, { x: 48, y: 43 }, { x: 24, y: 44 }, { x: 35, y: 45 }, { x: 11, y: 46 }, { x: 19, y: 46 }, { x: 2, y: 47 }, { x: 29, y: 47 }, { x: 9, y: 48 }, { x: 40, y: 48 }, { x: 46, y: 48 }, { x: 47, y: 48 }, { x: 26, y: 49 }, { x: 33, y: 49 }]
  `;
  // 生成每個格子
  function renderGrid(size, layout = []) {
    clickableBox.innerHTML = ''; // 清空原本內容
    clickableBox.style.display = 'grid';
    clickableBox.style.gridTemplateColumns = `repeat(${size}, 1fr)`;
    clickableBox.style.gridTemplateRows = `repeat(${size}, 1fr)`;
  
    // 計算每個格子的大小
    const boxSize = 600; // 黑色框框大小 (已在CSS固定300px)
    const cellSize = Math.floor(boxSize / size);
    const cells = []; // 儲存格子狀態

    // 渲染轴标签
    renderAxes(size);

    // 清空 sensors 與計數
    sensors.length = 0;
    sensorCount = 0;
    gbestDisplay.textContent = `Sensor Count: ${sensorCount}`;

    // 生成格子
    for (let i = 0; i < size * size; i++) {
      const cell = document.createElement('div');
      cell.classList.add('grid-cell');
      cell.dataset.index = i; // 設置格子索引
      cell.style.backgroundColor = 'rgb(0, 45, 255)'; // 預設為深藍色
      cells[i] = false; // 初始狀態：沒有 sensor

      const x = i % size;
      const y = Math.floor(i / size);

      // 檢查是否需要擺放初始 sensor
      const isSensor = layout.some(sensor => sensor.x === x && sensor.y === y);
      if (isSensor) {
        cell.classList.add('sensor');
        sensors.push({ x, y });
        sensorCount++;
      }

      // 點擊事件：添加/移除 sensor
      cell.addEventListener('click', function () {
        // 點擊邏輯：添加/移除 sensor
        if (cell.classList.contains('sensor')) {
          cell.classList.remove('sensor');
          sensors.splice(sensors.findIndex(s => s.x === x && s.y === y), 1);
          sensorCount--;
        } else {
          cell.classList.add('sensor');
          sensors.push({ x, y });
          sensorCount++;
        }

        // 更新 Gbest 顯示
        gbestDisplay.textContent = `${sensorCount}`;
        calculateDetectionProbability(size, sensors, clickableBox);

        // 自動更新連線
        if (isConnectMode) {
          connectSensors();
        }
      });
      // 滑鼠靠近時顯示 Tooltip
      cell.addEventListener('mousemove', function (e) {
        const probability = cell.dataset.probability || 0; // 取得當前機率
        // 計算當前格子的 threshold 值
        let currentThreshold = 0.3; // 預設值
        if (limitThreshold && limitThreshold[y] && limitThreshold[y][x] !== undefined) {
          currentThreshold = limitThreshold[y][x]; // 從 limitThreshold 中取得對應值
        }
      
        // 更新 Tooltip 內容
        tooltip.innerHTML = `
          Row: ${x+1}, Column: ${y+1}<br>
          Detection Probability: ${parseFloat(probability).toFixed(3)}<br>
          Threshold: ${currentThreshold.toFixed(2)}
        `;
      
        // 設置 Tooltip 位置（滑鼠右上角）
        tooltip.style.left = `${e.pageX + 10}px`;
        tooltip.style.top = `${e.pageY - 10}px`;
        tooltip.style.display = 'block';
      });
      // 滑鼠離開時隱藏 Tooltip
      cell.addEventListener('mouseleave', function () {
        tooltip.style.display = 'none';
      });

      clickableBox.appendChild(cell);
    }
    gbestDisplay.textContent = `${sensorCount}`;
    calculateDetectionProbability(size, sensors, clickableBox);
    // 如果處於連線模式，自動觸發連線功能
    if (isConnectMode) {
      connectSensors();
    }
    // 更新進度條的generation
    generationSlider.max = Object.keys(generations).length;
    updateProgressBar(0); // 同步更新進度條
  }
  // 生成xy軸標籤
  function renderAxes(gridSize) {
    // 獲取 clickableBox 的寬度和高度
    let boxWidth = clickableBox.offsetWidth - 8;
    let boxHeight = clickableBox.offsetHeight - 8;
    // 計算每個格子的大小
    if(boxWidth === -8) boxWidth = 600 - 8;
    if(boxHeight === -8) boxHeight = 600 - 8;
    const cellWidth = boxWidth / gridSize;
    const cellHeight = boxHeight / gridSize;

    let fontSize = Math.min(cellWidth, cellHeight) * 0.7; // 字體大小為格子大小的 70%

    // 清空 X 和 Y 軸內容
    xAxis.innerHTML = '';
    yAxis.innerHTML = '';

    // 生成 X 軸標籤（從左到右）
    for (let i = 0; i < gridSize; i++) {
      const label = document.createElement('div');
      label.style.position = 'absolute';
      label.style.top = `5px`; // 固定在網格正下方
      label.style.left = `${8 + i * cellWidth}px`; // 動態計算每個標籤的位置
      label.style.width = `${cellWidth}px`;
      label.style.textAlign = 'center';
      label.style.fontSize = `${fontSize}px`; // 動態設置字體大小

      // 每 5 格顯示一次標籤
      if (i % 5 === 0) {
        label.textContent = i + 1; // 從 1 開始
      } else {
        label.textContent = ''; // 中間不顯示
      }

      xAxis.appendChild(label);
    }

    // 生成 Y 軸標籤（從上到下）
    for (let i = 0; i < gridSize; i++) {
      const label = document.createElement('div');
      label.style.position = 'absolute';
      label.style.top = `${4 + i * cellHeight}px`; // 動態計算每個標籤的位置
      label.style.left = `20px`; // 固定在 clickableBox 左側
      label.style.height = `${cellHeight}px`;
      label.style.textAlign = 'right';
      label.style.fontSize = `${fontSize}px`; // 動態設置字體大小
      label.style.lineHeight = `${cellHeight}px`; // 垂直置中

      // 每 5 格顯示一次標籤
      if (i % 5 === 0) {
        label.textContent = i + 1; // 從 1 開始
      } else {
        label.textContent = ''; // 中間不顯示
      }

      yAxis.appendChild(label);
    }
  }
  // 依據世代數，更新格子資訊
  function updateGrid(generationData) {
    // 1. 清空現有的感測器標記
    sensors.length = 0;
    sensorCount = 0;
    const cells = clickableBox.childNodes;
    cells.forEach(cell => {
      cell.classList.remove('sensor'); // 移除感測器標記
      cell.style.backgroundColor = 'rgb(0, 45, 255)'; // 恢復預設顏色
      cell.classList.remove('dissatisfy'); // 移除不滿足標記
      cell.dataset.probability = 0; // 重置機率
    });
  
    // 2. 根據 generationData 更新感測器位置
    generationData.forEach(sensor => {
      const index = sensor.y * gridSize + sensor.x; // 計算格子索引
      const cell = cells[index];
      cell.classList.add('sensor'); // 標記為感測器
      sensorCount++;
      sensors.push(sensor);
      cell.style.backgroundColor = 'black'; // 更新顏色
    });

    // 更新 Gbest 顯示
    gbestDisplay.textContent = `${sensorCount}`;
    calculateDetectionProbability(gridSize, sensors, clickableBox);
  }
  // 計算map的偵測機率
  function calculateDetectionProbability(gridSize, sensors, grid) {
    // 初始化所有格子的機率為 0
    const probabilities = Array(gridSize * gridSize).fill(0);
  
    
    sensors.forEach(sensor => {
      const sensorX = sensor.x;
      const sensorY = sensor.y;
  
      for (let dx = -sensingRange; dx <= sensingRange; dx++) {
        for (let dy = -sensingRange; dy <= sensingRange; dy++) {
          const distance = Math.sqrt(dx * dx + dy * dy); // 計算歐幾里得距離
          if (distance > sensingRange || distance === 0) continue; // 超出範圍或自身略過
  
          const prob = 1 / distance; // 偵測機率是距離的倒數
          const targetX = sensorX + dx;
          const targetY = sensorY + dy;
  
          if (targetX >= 0 && targetX < gridSize && targetY >= 0 && targetY < gridSize) {
            const index = targetY * gridSize + targetX;
            probabilities[index] = 1 - (1 - probabilities[index]) * (1 - prob); // 疊加公式
          }
        }
      }
    });

    // 將放置 sensor 的格子機率設為 1
    grid.childNodes.forEach((cell, index) => {
      const x = index % gridSize;
      const y = Math.floor(index / gridSize);

      const isSensor = sensors.some(sensor => sensor.x === x && sensor.y === y);
      if (isSensor) {
        probabilities[index] = 1; // 強制設為 1
      }

      // 儲存機率到格子 dataset
      cell.dataset.probability = probabilities[index];
    });
  
    probabilitiesCache = probabilities; // 更新 cache
    applyProbabilitiesToGrid(probabilities, grid);

    // 更新完成率
    const completionRate = calculateCompletionRate(grid);
    mapCheck.textContent = `${completionRate}% Completed`;
  }
  // 更新格子的狀態
  function applyProbabilitiesToGrid(probabilities, grid) {
    let currentThreshold = threshold; // 預設為 0.3

    // 過濾出所有格子，排除連線等其他元素
    const cells = Array.from(grid.childNodes).filter(cell => cell.classList.contains('grid-cell'));

    // 根據機率更新格子顏色
    cells.forEach((cell, index) => {
      const rows = Math.sqrt(cells.length); // 假設 grid 為正方形
      const row = Math.floor(index / rows); // 計算該格子的行號
      const col = index % rows; // 計算該格子的列號

      // 如果有檔案中的 limitThreshold，取對應的值
      if (limitThreshold && limitThreshold[row] && limitThreshold[row][col] !== undefined) {
        currentThreshold = limitThreshold[row][col];
      }
      // 更新格子樣式
      if (cell.classList.contains('sensor')) {
        // 如果是 sensor，顏色保持黑色
        cell.style.backgroundColor = 'black';
        cell.classList.remove('dissatisfy'); // 移除紅色斜線
      } else {
        const probability = probabilities[index];
        cell.dataset.probability = probability; // 儲存機率

        if (probability > currentThreshold) {
          // 機率大於 Threshold，顯示機率顏色
          cell.style.backgroundColor = getColorFromProbability(probability);
          cell.classList.remove('dissatisfy'); // 移除紅色斜線
        } else {
          if (!isThresholdMode) {
            // 非 Threshold 模式時，顯示機率顏色
            cell.style.backgroundColor = getColorFromProbability(probability);
          } else {
            // 機率小於等於 Threshold，顯示 Threshold 顏色並加紅色斜線
            cell.style.backgroundColor = lightenColor(getColorFromProbability(currentThreshold), 0.6);
          }
          cell.classList.add('dissatisfy'); // 添加紅色斜線
        }
      }
    });
  }
  // 更新 getColorFromProbability 函數
  function getColorFromProbability(prob) {
    const colors = [
      { stop: 0.0, r: 0, g: 45, b: 255 },     // 深藍色
      { stop: 0.2, r: 0, g: 95, b: 255 },     // 藍色
      { stop: 0.33, r: 0, g: 255, b: 255 },    // 淺藍色
      { stop: 0.4, r: 0, g: 255, b: 130 },    // 藍綠色
      { stop: 0.45, r: 84, g: 255, b: 0 },     // 綠色
      { stop: 0.55, r: 255, g: 255, b: 0 },    // 黃色
      { stop: 0.7, r: 255, g: 125, b: 0 },    // 橘色
      { stop: 0.8, r: 255, g: 29, b: 0 },     // 橘紅色
      { stop: 0.9, r: 234, g: 0, b: 0 },      // 紅色
      { stop: 1.0, r: 198, g: 0, b: 0 }       // 深紅色
    ];

    // 遍歷顏色區間，找到當前機率所在範圍
    for (let i = 0; i < colors.length - 1; i++) {
      const start = colors[i];
      const end = colors[i + 1];

      if (prob >= start.stop && prob <= end.stop) {
        const ratio = (prob - start.stop) / (end.stop - start.stop); // 計算插值比例

        // 線性插值計算 RGB 值
        const r = Math.floor(start.r + ratio * (end.r - start.r));
        const g = Math.floor(start.g + ratio * (end.g - start.g));
        const b = Math.floor(start.b + ratio * (end.b - start.b));

        return `rgb(${r}, ${g}, ${b})`;
      }
    }

    return `rgb(0, 45, 255)`; // 預設返回深藍色
  }
  // 機率小於Threshold，顯示淡色
  function lightenColor(color, factor) {
    // 假設 color 是 RGB 格式，例如 "rgb(255, 0, 0)"
    const colorValues = color.match(/\d+/g).map(Number); // 提取 RGB 值
    const [r, g, b] = colorValues;
  
    // 根據 factor 計算變淡的顏色
    const newR = Math.min(255, r + (255 - r) * factor);
    const newG = Math.min(255, g + (255 - g) * factor);
    const newB = Math.min(255, b + (255 - b) * factor);
  
    return `rgb(${Math.round(newR)}, ${Math.round(newG)}, ${Math.round(newB)})`;
  }
  // 計算完成率
  function calculateCompletionRate(grid) {
    // 過濾出所有格子元素，排除連線元素
    const cells = Array.from(grid.childNodes).filter(cell => cell.classList.contains('grid-cell'));

    const totalCells = cells.length; // 格子總數
    let nonDissatisfyCount = 0;
  
    // 遍歷所有格子，計算非 dissatisfy 的數量
    grid.childNodes.forEach(cell => {
      if (!cell.classList.contains('dissatisfy')) {
        nonDissatisfyCount++;
      }
    });
  
    // 計算完成率並返回百分比
    const completionRate = ((nonDissatisfyCount / totalCells) * 100).toFixed(2); // 保留兩位小數
    return completionRate; // 保證寬度一致
  }
  // 繪製連線
  function connectSensors() {
    clearConnections(); // 確保連線不重疊

    const cellSize = (clickableBox.offsetWidth-8) / gridSize; // 計算每個格子的大小

    sensors.forEach((sensorA, indexA) => {
      sensors.forEach((sensorB, indexB) => {
        if (indexA >= indexB) return; // 避免重複計算或自連

        const distance = Math.sqrt(
          Math.pow(sensorA.x - sensorB.x, 2) + Math.pow(sensorA.y - sensorB.y, 2)
        );

        if (distance <= connectDistance) {
          const line = document.createElement('div');
          line.classList.add('connection-line');

          // 起點與終點位置計算
          const startX = (sensorA.x + 0.5) * cellSize + 4;
          const startY = (sensorA.y + 0.5) * cellSize + 4;
          const endX = (sensorB.x + 0.5) * cellSize + 4;
          const endY = (sensorB.y + 0.5) * cellSize + 4;

          const length = Math.sqrt(Math.pow(endX - startX, 2) + Math.pow(endY - startY, 2));
          const angle = Math.atan2(endY - startY, endX - startX) * (180 / Math.PI);

          // 設置線條位置與角度
          line.style.width = `${length}px`;
          line.style.height = `2px`; // 固定高度
          line.style.transform = `rotate(${angle}deg)`;
          line.style.backgroundColor = `black`; // 確保顏色為黑色
          line.style.left = `${startX}px`;
          line.style.top = `${startY}px`;

          clickableBox.appendChild(line); // 添加到 clickable-box 中
          connectionLines.push(line);
        }
      });
    });
  }
  // 清除所有連線
  function clearConnections() {
    connectionLines.forEach(line => line.remove());
    connectionLines = [];
  }
  // 解析檔案內容
  function parseFileContent(content) {
    const lines = content.split('\n').map(line => line.trim());
    let currentSection = null;
    let generation = 0;
    generations = {}; // 重置 generations
    limitThreshold = []; // 重置 limitThreshold


    lines.forEach(line => {
      if (line.startsWith('Map')) {
        currentSection = 'Map';
      } else if (line.startsWith('Sensing_range')) {
        currentSection = 'Sensing_range';
      } else if (line.startsWith('Connect')) {
        currentSection = 'Connect';
      } else if (line.startsWith('Limit')) {
        currentSection = 'Limit';
      } else if (line.startsWith('Generation')) {
        currentSection = 'Generation';
      } else if (line.startsWith('*')) {
        currentSection = 'GenerationData';
      }

      switch (currentSection) {
        case 'Map':
          const sizeMatch = line.match(/(\d+)x(\d+)/);
          if (sizeMatch) {
            mapSize = parseInt(sizeMatch[1]);
          }
          break;

        case 'Sensing_range':
          const rangeMatch = line.match(/(\d+)/);
          if (rangeMatch) {
            sensingRange = parseInt(rangeMatch[1]);
          }
          break;

        case 'Connect':
          const connectMatch = line.match(/(\d+)/);
          if (connectMatch) {
            connectDistance = parseInt(connectMatch[1]);
          }
          break;

        case 'Limit':
          if (!line.startsWith('Limit')) {
            limitThreshold.push(line.split(' ').map(Number));
          }
          break;

        case 'GenerationData':
          line = line.trim(); // 移除多餘空白
          const generationMatch = line.match(/\[.*\]/);
          if (generationMatch) {
            // 找到包含感測器座標的 JSON 區域
            const dataMatch = line.match(/\[.*\]/);
            if (dataMatch) {
              // 將座標 JSON 字串轉為陣列
              const sensorData = JSON.parse(dataMatch[0].replace(/(\w+):/g, '"$1":'));
              generations[generation] = sensorData;
            }
            generation++;
          }
          break;
      }
    });
    updateMap(mapSize, sensingRange, connectDistance, limitThreshold, generations);
  }
  // 更新地圖
  function updateMap(mapSize, sensingRange, connectDistance, limitThreshold, generations) {
    // console.log('Map Size:', mapSize);
    // console.log('Sensing Range:', sensingRange);
    // console.log('Connect Distance:', connectDistance);
    // console.log('Limit Threshold:', limitThreshold);
    // console.log('Generations:', generations);

    // 更新地圖大小和格子配置
    gridSize = mapSize; // 更新全域變數
    renderGrid(gridSize, generations[0] || []); // 預設顯示第一代感測器擺放位置
  }
  // 更新進度條的值和顯示的 generation 數
  function updateProgressBar(generation) {
    generationSlider.value = generation + 1; // 更新滑桿位置
    currentGenerationDisplay.textContent = generation + 1; // 更新顯示的 generation
  }
  // 開始播放功能
  function startPlayback() {
    playInterval = setInterval(() => {
      // 如果已播放到最後一代，自動暫停
      if (currentGeneration >= Object.keys(generations).length) {
        clearInterval(playInterval); // 清除計時器
        isPlaying = false;
        playPauseBtn.textContent = 'Play'; // 更新按鈕文字
        currentGeneration = 0;
      } else {
        updateGrid(generations[currentGeneration] || []); // 更新格子資訊
        updateProgressBar(currentGeneration); // 同步更新進度條
        currentGeneration++; // 進入下一代
      }
    }, 1000 / playbackSpeed); // 根據速度倍率調整間隔
  }
  // 根據選項更新格子
  solutionDropdown.addEventListener('change', function () {
    const selectedValue = parseInt(this.value);
    limitThreshold = [];
    generations = {};

    if (selectedValue === 1){
      parseFileContent(fileContent0sensor);
    }
    else if (selectedValue === 2) {
      parseFileContent(fileContent);
    }
  });
  parseFileContent(fileContent0sensor);
  // 切換threshold / detection probability 模式
  thresholdBtn.addEventListener('click', function () {
    isThresholdMode = !isThresholdMode;
    thresholdBtn.textContent = isThresholdMode ? 'Detection Probability' : 'Threshold';

    applyProbabilitiesToGrid(probabilitiesCache, clickableBox);
  });
  // 連線與移除連線
  connectBtn.addEventListener('click', function () {
    isConnectMode = !isConnectMode;
    connectBtn.textContent = isConnectMode ? 'Disconnect' : 'Connect';

    if (isConnectMode) {
      connectSensors();
    } else {
      clearConnections();
    }
  });
  // 檔案讀取
  fileInput.addEventListener('change', function (event) {
    const file = event.target.files[0];
    if (!file) return;
    
    const reader = new FileReader();
    reader.onload = function (e) {
      const content = e.target.result;
      parseFileContent(content); // 解析檔案內容
    };
    reader.readAsText(file);

    // **重置 input 的值**
    fileInput.value = ''; // 讓相同檔案再次被選取時能觸發事件
  }); 
  // 按下播放/暫停按鈕時觸發
  playPauseBtn.addEventListener('click', function () {
    if (isPlaying) {
      // 如果正在播放，則暫停播放
      clearInterval(playInterval); // 清除計時器
      isPlaying = false;
      playPauseBtn.textContent = 'Play'; // 更新按鈕文字
    } else {
      // 如果暫停，則開始播放
      isPlaying = true;
      playPauseBtn.textContent = 'Pause'; // 更新按鈕文字
  
      startPlayback(); // 開始播放
    }
  });
  // 拖曳進度條可選擇generation，更新進度條的值和顯示的 generation 數
  generationSlider.addEventListener('input', function () {
    const generation = parseInt(generationSlider.value, 10) - 1; // 取得滑桿的值
    currentGeneration = generation;
    updateProgressBar(currentGeneration); // 更新進度條顯示
    updateGrid(generations[currentGeneration] || []); // 更新格子資訊
  });
  // 加速功能
  speedUpBtn.addEventListener('click', () => {
    if (playbackSpeed < maxSpeed) {
      playbackSpeed++;
      speedDisplay.textContent = `Speed: ${playbackSpeed}x`;

      // 如果正在播放，重新調整播放間隔
      if (isPlaying) {
        clearInterval(playInterval); // 清除當前計時器
        startPlayback(); // 使用新的速度重新啟動播放
      }
    }
  });
  // 減速功能
  speedDownBtn.addEventListener('click', () => {
    if (playbackSpeed > minSpeed) {
      playbackSpeed--;
      speedDisplay.textContent = `Speed: ${playbackSpeed}x`;

      // 如果正在播放，重新調整播放間隔
      if (isPlaying) {
        clearInterval(playInterval); // 清除當前計時器
        startPlayback(); // 使用新的速度重新啟動播放
      }
    }
  });
});